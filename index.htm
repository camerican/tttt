<html>
<head>
<title>TeeSpring TicTacToe</title>
<link href="css/main.css" rel="stylesheet"></link>
<link href="//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet">
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<link href='//fonts.googleapis.com/css?family=Roboto:400,300,700,300italic,400italic,700italic' rel='stylesheet' type='text/css'>
<link href='//fonts.googleapis.com/css?family=Roboto+Slab:400,300,700, 100' rel='stylesheet' type='text/css'>
</head>
<script>
$(document).ready(function() {
	var grid = [ [ 0, 0, 0 ], [0, 0, 0], [0, 0, 0] ];	//populate our grid
	var move = 0;
	var over = false
	var lines = [
		[ [0,0], [0,1], [0,2] ],
		[ [1,0], [1,1], [1,2] ],
		[ [2,0], [2,1], [2,2] ],
		[ [0,0], [1,0], [2,0] ],
		[ [0,1], [1,1], [2,1] ],
		[ [0,2], [1,2], [2,2] ],
		[ [0,0], [1,1], [2,2] ],
		[ [0,2], [1,1], [2,0] ]
	];
	console.log( lines );
	var currentPlayer = 1;	//player who's move it is
	var p1S = 0;	//symbol ID
	var p2S = 1;	//symbol ID

	var symbol = [ "times", "circle-o", "cog", "university", "suitcase", "heart", "key", "flash", "bomb", "futbol-o", "tree" ];


	for( var x=0;x<symbol.length;x++ ) {
		$('#right select').append("<option value='"+x+"'>"+symbol[x]+"</option>");
	}

	$('#grid div:not(.clicked)').bind('click', function() {
		if( over || move > 8 ) return false;	//insta-return if game is already over
		var tmp = $(this).attr('id').split('_');
		console.log(tmp);
		if( tmp.length < 3 ) {
			return false;	//error, id could not be loaded
		}
		var r = tmp[1];	//get row Id
		var c = tmp[2];	//get column Id

		console.log( "r="+r+"; c="+c);

		if( grid[r][c] != 0 )
			return false;	//if square is not empty, reset

		if( makeMove(currentPlayer,r,c) ) {
			$(this).unbind('click');	//remove the bind if move is successful
		}
	});

	$('.symbol_selection i').bind('click', function() {
		console.log('symbol selection clicked: '+$(this).attr('data-id'));
		console.log( $(this).parents('#right').length );
		if($(this).parents('#right').length > 0) {
			swapSymbol( $(this).attr('data-id'), p2S, 2 );
		} else {
			swapSymbol( $(this).attr('data-id'), p1S, 1 );
		}
	});

	$('#reset').bind('click', function(){
		resetGrid();
	});

	var swapSymbol = function( newSymbol, oldSymbol, player ) {
		if( newSymbol == p1S || newSymbol == p2S ) return;	//safety-check
		console.log('swapSymbol( '+newSymbol+', '+oldSymbol+')');
		console.log('fa-'+symbol[oldSymbol]);
		console.log('fa-'+symbol[newSymbol]);
		//swap out each occurance of old symbol in the grid and replace it with new symbol
		$('#board #grid div i.fa-'+symbol[oldSymbol]).removeClass('fa-'+symbol[oldSymbol]).addClass('fa-'+symbol[newSymbol]);
		//swap out new symbol from the symbol selection menus and swap in old symbol
		$('.symbol_selection i.fa-'+symbol[newSymbol]).removeClass('fa-'+symbol[newSymbol]).addClass('fa-'+symbol[oldSymbol]).attr('data-id',oldSymbol);
		if( player == 1 ) {
			p1S = newSymbol;
		} else {
			p2S = newSymbol;
		}

	}

	var pulsate = function(obj) {
		for(var x=0;x<3;x++) {
			obj.animate({opacity: 0.2}, 1000, 'linear')
			 .animate({opacity: 1}, 1000, 'linear');
		}
	}
	pulsate($('#left .possession'));

	var resetGrid = function() {
		grid = [ [ 0, 0, 0 ], [0, 0, 0], [0, 0, 0] ];	//this references global grid variable
		move = 0;
		over = false;

		//show move indicator
		if( currentPlayer == 1) {
			pulsate($('#left .possession').removeClass('hidden').attr('opacity',1));
		} else {
			pulsate($('#right .possession').removeClass('hidden').attr('opacity',1));
		}
		$('#board #grid div').removeClass('white').html('');	//reset grid coloration
		$('#reset').addClass('hidden');	//hide reset button for now
		$('console').html('');	//reset console

	}

	var checkWin = function() {
		var gridSums = [ 
			grid[0][0] + 2*grid[0][1] + 4*grid[0][2],
			grid[1][0] + 2*grid[1][1] + 4*grid[1][2],
			grid[2][0] + 2*grid[2][1] + 4*grid[2][2],
			grid[0][0] + 2*grid[1][0] + 4*grid[2][0],
			grid[0][1] + 2*grid[1][1] + 4*grid[2][1],
			grid[0][2] + 2*grid[1][2] + 4*grid[2][2],
			grid[0][0] + 2*grid[1][1] + 4*grid[2][2],
			grid[0][2] + 2*grid[1][1] + 4*grid[2][0]
		];
		console.log( gridSums );
		/*
		var l_h1 = grid[0][0] + grid[0][1] + grid[0][2];
		var l_h2 = grid[1][0] + grid[1][1] + grid[1][2];
		var l_h3 = grid[1][0] + grid[1][1] + grid[1][2];
		var l_v1 = grid[0][0] + grid[1][0] + grid[2][0];
		var l_v2 = grid[0][1] + grid[1][1] + grid[2][1];
		var l_v3 = grid[0][2] + grid[1][2] + grid[2][2];
		var l_d1 = grid[0][0] + grid[1][1] + grid[2][2];
		var l_d2 = grid[0][2] + grid[1][1] + grid[2][0];
		*/
		//if Player 1 has won
		var tmp, victor;
		//console.log( tmp = gridSums.indexOf(7) );
		if( (tmp = gridSums.indexOf(7)) >= 0 && tmp >= 0 ) {
			victor = 1;
		//if Player 2 has won
		} else if ( (tmp = gridSums.indexOf(14)) >= 0 && tmp >= 0 )	{
			victor = 2;
		//if neither player has won
		} else {
			return false;
		}
		//console.log( 'call announceWinner('+victor+', '+tmp+')' );
		announceWinner( victor, tmp );
		return true;
	}

	var announceWinner = function( player, line ) {
		var style;
		over = true;

		if( line < 3 ) 		style = "horizonal";
		else if( line < 5 ) style = "vertical";
		else				style = "diagonal";

		$('#console').html("Player "+player+ " has won "+style+ "ly!");

		drawLine(line);

		//increment wins
		if(player==1) {
			$('#left .score span').html(1+parseInt($('#left .score span').html()));
		} else {
			$('#right .score span').html(1+parseInt($('#right .score span').html()));
		}

		//show reset button
		$('#reset').removeClass('hidden');

	}
	var announceDraw = function( ) {
		$('#console').html('Oh no! It\'s a tie!');
		$('#grid div').each( function(index){
			$(this).delay(150*index).queue(function(next) {
				$(this).addClass('white');
				next();
			});
		});
		/*
		for(var x=0;x<3;x++){
			for(var y=0;y<3;y++) {
				$('#s_'+x+'_'+y).delay('1000').addClass('white');
			}
		}
		*/
		//show reset button
		$('#reset').removeClass('hidden');

		$('#left .possession').addClass('hidden').show();
		$('#right .possession').addClass('hidden').show();

	}
	var makeMove = function( player, row, col ) {
		console.log( "makeMove("+player+', '+row+', '+col+')' );
		if( grid[row][col] != 0 ) return -1;	//error check, this square cannot be marked
		
		var locSym;
		if( player == 1 ) locSym = p1S;
		else if( player == 2 ) locSym = p2S;

		//mark square
		$('#s_'+row+'_'+col).html('<i class="p'+player+' fa fa-'+symbol[locSym]+'"></i>');
		console.log("here");
		//update grid
		grid[row][col] = player;

		//increment move counter
		move++;

		//toggleTurn in either case (loser starts or next person's turn)
		toggleTurn(player);

		//check winner
		var chkwin = checkWin();
		console.log( "Win? "+chkwin + ' ... move #'+move);
		if( !chkwin && move >= 9 ) //if no winner & last move
			 announceDraw();

	}
	var toggleTurn = function(player) {
		if( over ) {
			$('#left .possession').addClass('hidden').show();
			$('#right .possession').addClass('hidden').show();
		} else if( player == 1 ) {
			currentPlayer = 2;
			pulsate($('#right .possession').removeClass('hidden').attr('opacity',1));
			$('#left .possession').stop(true,true).fadeOut({
				complete: function(){
					$(this).addClass('hidden').show();
				}
			});
		} else {
			currentPlayer = 1;
			pulsate($('#left .possession').removeClass('hidden').attr('opacity',1));
			$('#right .possession').stop(true,true).fadeOut({
				complete: function(){
					$(this).addClass('hidden').show();
				}
			});
		} 

	}
	//draw the winning line by fading out the other boxes not on this line
	var drawLine = function(line) {
		for(var x=0;x<3;x++){
			for(var y=0;y<3;y++) {

				var found = false;
				for( var i=0;i<3;i++) {
					console.log( 'lines[line]['+i+']: '+lines[line][i] );
					if( lines[line][i][0] == x && 
						lines[line][i][1] == y ) {
						console.log('FFFFFOUND: ' +x+','+y);
						found=true;
					}
				}

				if( !found )
					$('#s_'+x+'_'+y).addClass('white');
			}
		}

		//let's have a go at this from the other direction
		/*
		for(var x=0;x<3;x++){
			for(var y=0;y<3;y++) {
				//console.log(x+','+y+': ('+lines[line]+') '+lines[line].indexOf([x][y]));
				console.log(x+','+y+': ('+lines[line][0]+')');
				console.log(x+','+y+': ('+lines[line][1]+')');
				console.log(x+','+y+': ('+lines[line][2]+')');
				if( lines[line][0] != [x,y] && 
					lines[line][1] != [x,y] &&
					lines[line][2] != [x,y] ) {//if we don't find our square in this line
					
					$('#s_'+x+'_'+y).attr('background-color','#ffffff');

				}
			}
		}
		*/
	}
});
</script>
<body>
<br />
<h1><em>Tacky</em>Tic Tac Toe</h1>
<div id="console">&nbsp;</div>
<div id="container">
	<section id="left">
		<div class="player">Player 1</div>
		<div class="possession"><div class="msg">Your&nbsp;Turn</div><div class="arrow"><i class="fa fa-arrow-right"></i></div></div>
		
		<div class="score">Wins&nbsp;<span>0</span></div>

		<div class="symbol_selection">
			<i class="fa fa-cog" data-id="2"></i><i class="fa fa-university" data-id="3"></i><i class="fa fa-suitcase" data-id="4"></i><i class="fa fa-heart" data-id="5"></i><i class="fa fa-key" data-id="6"></i><i class="fa fa-flash" data-id="7"></i><i class="fa fa-bomb" data-id="8"></i><i class="fa fa-futbol-o" data-id="9"></i><i class="fa fa-tree" data-id="10"></i>
			<small>Change symbol</small>
		</div>
	</section>
	<section id="board">
		<div id="grid">
			<div id="s_0_0"></div><div id="s_0_1"></div><div id="s_0_2"></div>
			<div id="s_1_0"></div><div id="s_1_1"></div><div id="s_1_2"></div>
			<div id="s_2_0"></div><div id="s_2_1"></div><div id="s_2_2"></div>
		</div>
	</section>
	<section id="right">
		<div class="player">Player 2</div>
		<div class="possession hidden"><div class="arrow"><i class="fa fa-arrow-left"></i></div><div class="msg">Your&nbsp;Turn</div></div>
		<div class="score">Wins&nbsp;<span>0</span></div>
		<div class="symbol_selection">
			<i class="fa fa-cog" data-id="2"></i><i class="fa fa-university" data-id="3"></i><i class="fa fa-suitcase" data-id="4"></i><i class="fa fa-heart" data-id="5"></i><i class="fa fa-key" data-id="6"></i><i class="fa fa-flash" data-id="7"></i><i class="fa fa-bomb" data-id="8"></i><i class="fa fa-futbol-o" data-id="9"></i><i class="fa fa-tree" data-id="10"></i>
			<small>Change symbol</small>
		</div>
	</section>
	<br />
	<div id="reset" class="hidden">Reset</div>
</div>

</body>
</html>